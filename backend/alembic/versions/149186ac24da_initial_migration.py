"""initial migration

Revision ID: 149186ac24da
Revises: 
Create Date: 2025-03-18 14:01:22.429097

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '149186ac24da'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('regions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_regions_id'), 'regions', ['id'], unique=False)
    op.create_index(op.f('ix_regions_name'), 'regions', ['name'], unique=True)
    op.create_table('therapeutic_areas',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_therapeutic_areas_id'), 'therapeutic_areas', ['id'], unique=False)
    op.create_index(op.f('ix_therapeutic_areas_name'), 'therapeutic_areas', ['name'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('ingredient', sa.String(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('creation_date', sa.Date(), nullable=True),
    sa.Column('creator_id', sa.Integer(), nullable=True),
    sa.Column('therapeutic_area_id', sa.Integer(), nullable=True),
    sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['therapeutic_area_id'], ['therapeutic_areas.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_products_id'), 'products', ['id'], unique=False)
    op.create_index(op.f('ix_products_ingredient'), 'products', ['ingredient'], unique=False)
    op.create_index(op.f('ix_products_name'), 'products', ['name'], unique=False)
    op.create_table('product_region',
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('region_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['region_id'], ['regions.id'], )
    )
    op.execute("""
            CREATE INDEX ix_products_search_vector ON products USING GIN (search_vector);
        """)

    op.execute("""
            CREATE FUNCTION update_search_vector() RETURNS trigger AS $$
            BEGIN
                NEW.search_vector := to_tsvector('english', COALESCE(NEW.name, '') || ' ' ||  
                                                       COALESCE(NEW.ingredient, ''));
                RETURN NEW;
            END
            $$ LANGUAGE plpgsql;
        """)
    op.execute("""
                CREATE TRIGGER products_search_update BEFORE INSERT OR UPDATE
                ON products FOR EACH ROW EXECUTE FUNCTION update_search_vector();
            """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('product_region')
    op.drop_index(op.f('ix_products_name'), table_name='products')
    op.drop_index(op.f('ix_products_ingredient'), table_name='products')
    op.drop_index(op.f('ix_products_id'), table_name='products')
    op.drop_table('products')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_therapeutic_areas_name'), table_name='therapeutic_areas')
    op.drop_index(op.f('ix_therapeutic_areas_id'), table_name='therapeutic_areas')
    op.drop_table('therapeutic_areas')
    op.drop_index(op.f('ix_regions_name'), table_name='regions')
    op.drop_index(op.f('ix_regions_id'), table_name='regions')
    op.drop_table('regions')
    op.execute("DROP TRIGGER IF EXISTS products_search_update ON products;")
    op.execute("DROP FUNCTION IF EXISTS update_search_vector;")
    op.execute("DROP INDEX IF EXISTS ix_products_search_vector;")
    op.execute("ALTER TABLE products DROP COLUMN search_vector;")

    # ### end Alembic commands ###
